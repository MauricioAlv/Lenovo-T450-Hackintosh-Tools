#Maintained by: dxxs for: 派奇
#battery_ASUS_N550_N551.txt

# version(版本): 1.2
# Update Time(更新时间) : 

# initial work by dxxs 2015-04-24, 由 dxxs 制作 

# works for: 针对
#  ASUS N550 JK
#  ASUS N550 JV
#  ASUS N551 JK
#  ASUS N551 JV

# Tip: If you get a 0% battery status,you should also patch the Rehabman's "Fix Mutex with non-zero SyncLevel" patch.
# You also can patch the both of your computer's battery patch and the Rehabman's patch at one time.

# 注意：如果打过电量补丁后，有获取的电池状态显示为0%的情况，还需要打 Rehabman的 “Fix Mutex with non-zero SyncLevel” 补丁。
# 你也可以，一次性打好 自己电脑的电量补丁 和 Rehabman 的那个补丁。

# ==== Field devide 字段拆分 ====
#B0C3
into device label EC0 code_regex B0C3,\s+16, replace_matched begin B0CA,8,B0CB,8, end;
#B0SN
into device label EC0 code_regex B0SN,\s+16, replace_matched begin B0N0,8,B0N1,8, end;
#B1SN
into device label EC0 code_regex B1SN,\s+16 replace_matched begin B1N0,8,B1N1,8 end;
#DT2B
into device label EC0 code_regex DT2B,\s+16 replace_matched begin DTB0,8,DTB1,8 end;

# ==== Replace called method 替换调用方法 ====
#B0C3
into method label _BIX code_regex \^\^LPCB.EC0.B0C3 replaceall_matched begin B1B2(^^LPCB.EC0.B0CA,^^LPCB.EC0.B0CB) end;
#B0SN
into method label BIFA code_regex B0SN replaceall_matched begin B1B2(B0N0,B0N1) end;
#B1SN
into method label BIFA code_regex B1SN replaceall_matched begin B1B2(B1N0,B1N1) end;
#BDAT
into method label SMBR code_regex Store\s\(Zero,\sBDAT\) replaceall_matched begin WECB(0x1C,256,Zero) end;
into method label SMBR code_regex \(BDAT replaceall_matched begin (RECB(0x1C,256) end;
into method label SMBW code_regex Store\s\(Zero,\sBDAT\) replaceall_matched begin WECB(0x1C,256,Zero) end;
into method label SMBW code_regex Store\s\(Arg4,\sBDAT\) replaceall_matched begin WECB(0x1C,256,Arg4) end;
into method label ECSB code_regex Store\s\(DerefOf\s\(Index\s\(Arg6,\sOne\)\),\sBDAT\)  replaceall_matched begin WECB(0x1C,256,DerefOf (Index (Arg6, One))) end;
into method label ECSB code_regex \(BDAT replaceall_matched begin (RECB(0x1C,256) end;
#DT2B
into method label SMBR code_regex DT2B replaceall_matched begin B1B2(DTB0,DTB1) end;
into method label SMBW code_regex Store\s\(Arg4,\sDT2B\) replaceall_matched begin Store (ShiftRight(Arg4,8),DTB1)\nStore (Arg4,DTB0) end;
#BDA2
into method label ECSB code_regex Store\s\(DerefOf\s\(Index\s\(Arg6,\sOne\)\),\sBDA2\) replaceall_matched begin WECB(0x44,256,DerefOf (Index (Arg6, One))) end;
into method label ECSB code_regex \(BDA2 replaceall_matched begin (RECB(0x44,256) end;

# ==== Data handling method 数据处理方法 ====
# utility methods to read/write buffers from/to EC
into method label RE1B parent_label EC0 remove_entry;
into method label RECB parent_label EC0 remove_entry;
into device label EC0 insert
begin
Method (RE1B, 1, NotSerialized)\n
{\n
    OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\n
    Field(ERAM, ByteAcc, NoLock, Preserve) { BYTE, 8 }\n
    Return(BYTE)\n
}\n
Method (RECB, 2, Serialized)\n
{\n
    ShiftRight(Arg1, 3, Arg1)\n
    Name(TEMP, Buffer(Arg1) { })\n
    Add(Arg0, Arg1, Arg1)\n
    Store(0, Local0)\n
    While (LLess(Arg0, Arg1))\n
    {\n
        Store(RE1B(Arg0), Index(TEMP, Local0))\n
        Increment(Arg0)\n
        Increment(Local0)\n
    }\n
    Return(TEMP)\n
}\n
end;

into method label WE1B parent_label EC0 remove_entry;
into method label WECB parent_label EC0 remove_entry;
into device label EC0 insert
begin
Method (WE1B, 2, NotSerialized)\n
{\n
    OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\n
    Field(ERAM, ByteAcc, NoLock, Preserve) { BYTE, 8 }\n
    Store(Arg1, BYTE)\n
}\n
Method (WECB, 3, Serialized)\n
// Arg0 - offset in bytes from zero-based EC\n
// Arg1 - size of buffer in bits\n
// Arg2 - value to write\n
{\n
    ShiftRight(Arg1, 3, Arg1)\n
    Name(TEMP, Buffer(Arg1) { })\n
    Store(Arg2, TEMP)\n
    Add(Arg0, Arg1, Arg1)\n
    Store(0, Local0)\n
    While (LLess(Arg0, Arg1))\n
    {\n
        WE1B(Arg0, DerefOf(Index(TEMP, Local0)))\n
        Increment(Arg0)\n
        Increment(Local0)\n
    }\n
}\n
end;

into method label B1B2 remove_entry;
into definitionblock code_regex . insert
begin
Method (B1B2, 2, NotSerialized)\n
{\n
Return(Or(Arg0, ShiftLeft(Arg1, 8)))\n
}\n
end;