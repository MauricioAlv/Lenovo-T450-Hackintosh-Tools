#Maintained by: dxxs for: 派奇
#battery_Sony_Fit_15E_or_SVF15327.txt

# version(版本): 2.1
# Update Time(更新时间) : 2014-6-26

# initial work by dxxs 2014-06-20, 由 dxxs 制作 

# works for: 针对
#  Sony Fit 15E
#  Sony SVF 15327
#  Sony SVF 14316

# Tip: If you get a 0% battery status,you should also patch the Rehabman's "Fix Mutex with non-zero SyncLevel" patch.
# You also can patch the both of your computer's battery patch and the Rehabman's patch at one time.

# 注意：如果打过电量补丁后，有获取的电池状态显示为0%的情况，还需要打 Rehabman的 “Fix Mutex with non-zero SyncLevel” 补丁。
# 你也可以，一次性打好 自己电脑的电量补丁 和 Rehabman 的那个补丁。

# ==== Field devide 字段拆分 ====
#SMW0
into device label EC0 code_regex SMW0,\s+16 replace_matched begin SMW0,8,SMW1,8 end;
#HKDA
into device label EC0 code_regex HKDA,\s+16 replace_matched begin HKDA,8,HKDB,8 end;
#BATD
into device label EC0 code_regex BATD,\s+16 replace_matched begin BATC,8,BATD,8 end;
#BT1I
into device label EC0 code_regex BT1I,\s+16 replace_matched begin BT1I,8,BT2I,8 end;
#BT1C
into device label EC0 code_regex BT1C,\s+16 replace_matched begin BT1C,8,BT2C,8 end;
#BT1V
into device label EC0 code_regex BT1V,\s+16 replace_matched begin BT1V,8,BT2V,8 end;
#ENCR
into device label EC0 code_regex ENCR,\s+16 replace_matched begin ENC0,8,ENC1,8 end;

# ==== Replace called method 替换调用方法 ====
#SMW0
into method label SMRW code_regex Store\s\(Arg3,\s\\_SB.PCI0.LPCB.EC0.SMW0\) replaceall_matched begin Store(ShiftRight(Arg3,8),\\_SB.PCI0.LPCB.EC0.SMW1)\nStore(Arg3, \\_SB.PCI0.LPCB.EC0.SMW0) end;
into method label SMRW code_regex \(\\_SB.PCI0.LPCB.EC0.SMW0 replaceall_matched begin (B1B2(\\_SB.PCI0.LPCB.EC0.SMW0,\\_SB.PCI0.LPCB.EC0.SMW1) end;
#SMD0
into method label SMRW code_regex Store\s\(Arg3,\s\\_SB.PCI0.LPCB.EC0.SMD0\) replaceall_matched begin \\_SB.PCI0.LPCB.EC0.WECB(0x1C,264,Arg3) end;
into method label SMRW code_regex \(\\_SB.PCI0.LPCB.EC0.SMD0 replaceall_matched begin \(\\_SB.PCI0.LPCB.EC0.RECB(0x1C,264) end;
#HKDA
into method label _Q94 code_regex HKDA replaceall_matched begin B1B2(HKDA,HKDB) end;
into method label SN07 code_regex \^\^EC0.HKDA replaceall_matched begin B1B2(^^EC0.HKDA,^^EC0.HKDB) end;
#BATD
into method label SELE code_regex BATD replaceall_matched begin B1B2(BATC,BATD) end;
into method label _PSR code_regex \^\^PCI0.LPCB.EC0.BATD replaceall_matched begin B1B2(^^PCI0.LPCB.EC0.BATC,^^PCI0.LPCB.EC0.BATD) end;
#BT1I
into method label UPBS code_regex \^\^PCI0.LPCB.EC0.BT1I replaceall_matched begin B1B2(^^PCI0.LPCB.EC0.BT1I,^^PCI0.LPCB.EC0.BT2I) end;
#BT1C
into method label UPBS code_regex \^\^PCI0.LPCB.EC0.BT1C replaceall_matched begin B1B2(^^PCI0.LPCB.EC0.BT1C,^^PCI0.LPCB.EC0.BT2C) end;
#BT1V
into method label UPBS code_regex \^\^PCI0.LPCB.EC0.BT1V replaceall_matched begin B1B2(^^PCI0.LPCB.EC0.BT1V,^^PCI0.LPCB.EC0.BT2V) end;
#ENCR
into method label SN02 code_regex Store\s\(Local1,\s\^\^EC0.ENCR\) replaceall_matched begin Store(ShiftRight(Local1,8),\^\^EC0.ENC1)\nStore(Local1, ^^EC0.ENC0) end; end;
into method label SN03 code_regex Store\s\(Local1,\s\^\^EC0.ENCR\) replaceall_matched begin Store(ShiftRight(Local1,8),\^\^EC0.ENC1)\nStore(Local1, ^^EC0.ENC0) end; end;

# ==== Data handling method 数据处理方法 ====
# utility methods to read/write buffers from/to EC
into method label RE1B parent_label EC0 remove_entry;
into method label RECB parent_label EC0 remove_entry;
into device label EC0 insert
begin
Method (RE1B, 1, NotSerialized)\n
{\n
    OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\n
    Field(ERAM, ByteAcc, NoLock, Preserve) { BYTE, 8 }\n
    Return(BYTE)\n
}\n
Method (RECB, 2, Serialized)\n
{\n
    ShiftRight(Arg1, 3, Arg1)\n
    Name(TEMP, Buffer(Arg1) { })\n
    Add(Arg0, Arg1, Arg1)\n
    Store(0, Local0)\n
    While (LLess(Arg0, Arg1))\n
    {\n
        Store(RE1B(Arg0), Index(TEMP, Local0))\n
        Increment(Arg0)\n
        Increment(Local0)\n
    }\n
    Return(TEMP)\n
}\n
end;

into method label WE1B parent_label EC0 remove_entry;
into method label WECB parent_label EC0 remove_entry;
into device label EC0 insert
begin
Method (WE1B, 2, NotSerialized)\n
{\n
    OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\n
    Field(ERAM, ByteAcc, NoLock, Preserve) { BYTE, 8 }\n
    Store(Arg1, BYTE)\n
}\n
Method (WECB, 3, Serialized)\n
// Arg0 - offset in bytes from zero-based EC\n
// Arg1 - size of buffer in bits\n
// Arg2 - value to write\n
{\n
    ShiftRight(Arg1, 3, Arg1)\n
    Name(TEMP, Buffer(Arg1) { })\n
    Store(Arg2, TEMP)\n
    Add(Arg0, Arg1, Arg1)\n
    Store(0, Local0)\n
    While (LLess(Arg0, Arg1))\n
    {\n
        WE1B(Arg0, DerefOf(Index(TEMP, Local0)))\n
        Increment(Arg0)\n
        Increment(Local0)\n
    }\n
}\n
end;

into method label B1B2 remove_entry;
into definitionblock code_regex . insert
begin
Method (B1B2, 2, NotSerialized)\n
{\n
Return(Or(Arg0, ShiftLeft(Arg1, 8)))\n
}\n
end;