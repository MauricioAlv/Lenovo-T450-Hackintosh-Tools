#Maintained by: dxxs for: 派奇
#battery_ThinkPad_E40.txt

# version(版本): 1.0
# Update Time(更新时间) :

# initial work by dxxs 2015-03-14, 由 dxxs 制作 

# works for: 针对
#  ThinkPad E40

# Tip: If you get a 0% battery status,you should also patch the Rehabman's "Fix Mutex with non-zero SyncLevel" patch.
# You also can patch the both of your computer's battery patch and the Rehabman's patch at one time.

# 注意：如果打过电量补丁后，有获取的电池状态显示为0%的情况，还需要打 Rehabman的 “Fix Mutex with non-zero SyncLevel” 补丁。
# 你也可以，一次性打好 自己电脑的电量补丁 和 Rehabman 的那个补丁。

# ==== Field devide 字段拆分 ====
#BATD
into device label EC code_regex BATD,\s+16, replace_matched begin TD00,8,TD01,8, end;
#SBRC
into device label EC code_regex SBRC,\s+16, replace_matched begin RC00,8,RC01,8, end;
#SBFC
into device label EC code_regex SBFC,\s+16, replace_matched begin FC00,8,FC01,8, end;
#SBAC
into device label EC code_regex SBAC,\s+16, replace_matched begin AC00,8,AC01,8, end;
#SBVO
into device label EC code_regex SBVO,\s+16, replace_matched begin VO00,8,VO01,8, end;
#SBDC
into device label EC code_regex SBDC,\s+16, replace_matched begin DC00,8,DC01,8, end;
#SBDV
into device label EC code_regex SBDV,\s+16, replace_matched begin DV00,8,DV01,8, end;
#SBSN
into device label EC code_regex SBSN,\s+16 replace_matched begin SN00,8,SN01,8 end;
#SBCH
into device label EC code_regex SBCH,\s+32 replace_matched begin CH00,8,CH01,8,CH02,8,CH03,8 end;
#SMW0
into device label EC code_regex SMW0,\s+16 replace_matched begin W000,8,W001,8 end;

# ==== Replace called method 替换调用方法 ====
#BATD
into method label SELE code_regex BATD replaceall_matched begin B1B2(TD00,TD01) end;
#SBRC
into method label GBST code_regex \^PCI0.LPCB.EC.SBRC replaceall_matched begin B1B2(\^PCI0.LPCB.EC.RC00,\^PCI0.LPCB.EC.RC01) end;
#SBFC
into method label GBIF code_regex \^PCI0.LPCB.EC.SBFC replaceall_matched begin B1B2(\^PCI0.LPCB.EC.FC00,\^PCI0.LPCB.EC.FC01) end;
#SBAC
into method label GBST code_regex \^PCI0.LPCB.EC.SBAC replaceall_matched begin B1B2(\^PCI0.LPCB.EC.AC00,\^PCI0.LPCB.EC.AC01) end;
#SBVO
into method label GBST code_regex \^PCI0.LPCB.EC.SBVO replaceall_matched begin B1B2(\^PCI0.LPCB.EC.VO00,\^PCI0.LPCB.EC.VO01) end;
#SBDC
into method label GBIF code_regex \^PCI0.LPCB.EC.SBDC replaceall_matched begin B1B2(\^PCI0.LPCB.EC.DC00,\^PCI0.LPCB.EC.DC01) end;
#SBDV
into method label GBIF code_regex \^PCI0.LPCB.EC.SBDV replaceall_matched begin B1B2(\^PCI0.LPCB.EC.DV00,\^PCI0.LPCB.EC.DV01) end;
#SBSN
into method label GBIF code_regex \^PCI0.LPCB.EC.SBSN replaceall_matched begin B1B2(\^PCI0.LPCB.EC.SN00,\^PCI0.LPCB.EC.SN01) end;
#SBCH
into method label GBIF code_regex \^PCI0.LPCB.EC.SBCH replaceall_matched begin B1B4(\^PCI0.LPCB.EC.CH00,\^PCI0.LPCB.EC.CH01,\^PCI0.LPCB.EC.CH02,\^PCI0.LPCB.EC.CH03) end;
#SBMN
into method label GBIF code_regex \^PCI0.LPCB.EC.SBMN replaceall_matched begin \^PCI0.LPCB.EC.RECB(0xA0, 128) end;
#SBDN
into method label GBIF code_regex \^PCI0.LPCB.EC.SBDN replaceall_matched begin \^PCI0.LPCB.EC.RECB(0xA0, 128) end;
#SMW0
into method label SMRD code_regex SMW0 replaceall_matched begin B1B2(W000,W001) end;
into method label SMWR code_regex Store\s\(Arg3,\sSMW0\) replaceall_matched begin Store(ShiftRight(Arg3,8), W001)\nStore(Arg3, W000) end;
#FLD1
into method label SMRD code_regex FLD1 replaceall_matched begin RECB(0x54, 128) end;
#FLD2
into method label SMRD code_regex FLD2 replaceall_matched begin RECB(0x54, 192) end;
#FLD3
into method label SMRD code_regex FLD3 replaceall_matched begin RECB(0x54, 256) end;

# ==== Deal with original RECB/WECB method 处理原生的RECB/WECB方法
into method label RECB set_label begin OREC end;
into method label WECB set_label begin OWEC end;
into method label BPOL code_regex RECB replaceall_matched begin OREC end;
into method label BPOL code_regex WECB replaceall_matched begin OWEC end;

# ==== Data handling method 数据处理方法 ====
# utility methods to read/write buffers from/to EC
into method label RE1B parent_label EC remove_entry;
into method label RECB parent_label EC remove_entry;
into device label EC insert
begin
Method (RE1B, 1, NotSerialized)\n
{\n
    OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\n
    Field(ERAM, ByteAcc, NoLock, Preserve) { BYTE, 8 }\n
    Return(BYTE)\n
}\n
Method (RECB, 2, Serialized)\n
{\n
    ShiftRight(Arg1, 3, Arg1)\n
    Name(TEMP, Buffer(Arg1) { })\n
    Add(Arg0, Arg1, Arg1)\n
    Store(0, Local0)\n
    While (LLess(Arg0, Arg1))\n
    {\n
        Store(RE1B(Arg0), Index(TEMP, Local0))\n
        Increment(Arg0)\n
        Increment(Local0)\n
    }\n
    Return(TEMP)\n
}\n
end;

into method label WE1B parent_label EC remove_entry;
into method label WECB parent_label EC remove_entry;
into device label EC insert
begin
Method (WE1B, 2, NotSerialized)\n
{\n
    OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\n
    Field(ERAM, ByteAcc, NoLock, Preserve) { BYTE, 8 }\n
    Store(Arg1, BYTE)\n
}\n
Method (WECB, 3, Serialized)\n
// Arg0 - offset in bytes from zero-based EC\n
// Arg1 - size of buffer in bits\n
// Arg2 - value to write\n
{\n
    ShiftRight(Arg1, 3, Arg1)\n
    Name(TEMP, Buffer(Arg1) { })\n
    Store(Arg2, TEMP)\n
    Add(Arg0, Arg1, Arg1)\n
    Store(0, Local0)\n
    While (LLess(Arg0, Arg1))\n
    {\n
        WE1B(Arg0, DerefOf(Index(TEMP, Local0)))\n
        Increment(Arg0)\n
        Increment(Local0)\n
    }\n
}\n
end;

into method label B1B2 remove_entry;
into definitionblock code_regex . insert
begin
Method (B1B2, 2, NotSerialized)\n
{\n
Return(Or(Arg0, ShiftLeft(Arg1, 8)))\n
\n
}\n
end;

into method label B1B4 remove_entry;
into definitionblock code_regex . insert
begin
Method (B1B4, 4, NotSerialized)\n
{\n
    Store(Arg3, Local0)\n
    Or(Arg2, ShiftLeft(Local0, 8), Local0)\n
    Or(Arg1, ShiftLeft(Local0, 8), Local0)\n
    Or(Arg0, ShiftLeft(Local0, 8), Local0)\n
    Return(Local0)\n
}\n
end;